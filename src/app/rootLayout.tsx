import "../styles/globals.css";

import type { Metadata } from "next";
import React from "react";
import { Inter } from "next/font/google";

import Header from "@/components/headers/header";
import HeaderMobile from "@/components/headers/header-mobile";
import MarginWidthWrapper from "@/components/sidebar/margin-width-wrapper";
import PageWrapper from "@/components/sidebar/page-wrapper";
import SideNav from "@/components/sidebar/side-nav";
import NotificationIcon from "@/components/notification/NotificationIcon";
import PopupNotif from "@/components/popups/notifPopup";
import { useState } from "react";
import useScroll from "@/hooks/use-scroll";
import { useSelectedLayoutSegment } from "next/navigation";

const inter = Inter({ subsets: ["latin"] });

const metadata: Metadata = {
  title: "MAGFLOW",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const scrolled = useScroll(5);
  const selectedLayout = useSelectedLayoutSegment();
  const [showPopup, setShowPopup] = useState(false);
  const role = localStorage.getItem("role");
  const userId = localStorage.getItem("userId");
  const userIdNumber = userId ? parseInt(userId, 10) : 0;

  const togglePopup = () => {
    setShowPopup(!showPopup); // Inverser la valeur de l'état pour afficher ou masquer le popup
  };

  const handleClick = () => {
    setShowPopup(!showPopup); // Inverser la valeur de l'état pour afficher ou masquer le popup
  };
  return (
    <html lang="en">
      <body className={`bg-white${inter.className}`}>
        <div className="flex text-[#2C2D41]">
          <SideNav />
          <main className="flex-1">
            <MarginWidthWrapper>
              {/* <Header /> */}
              <div className="relative flex justify-end mx-10 mt-8">
                {/* Ajouter relative pour positionner l'icône et le popup */}
                {showPopup && (
                  <div
                    className="fixed top-4 right-4 z-9999"
                    onClick={(e) => e.stopPropagation()}
                  >
                    <PopupNotif onClose={togglePopup} userId={userIdNumber} />
                  </div>
                )}
                <div>
                  <button onClick={handleClick}>
                    <NotificationIcon hasNewNotifications={true} />
                  </button>{" "}
                </div>
              </div>
              <HeaderMobile />
              <PageWrapper>{children}</PageWrapper>
            </MarginWidthWrapper>
          </main>
        </div>
      </body>
    </html>
  );
}
